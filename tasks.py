from flask import current_app
from celery_app import celery
from datetime import datetime, timedelta
from celery import shared_task
from models import Appointment
from database import db
from routes import send_message, show_main_menu
import pytz
from sqlalchemy.orm import joinedload
from sqlalchemy.orm.exc import StaleDataError
import logging

logger = logging.getLogger(__name__)

def get_local_timezone():
    return pytz.timezone('Asia/Sakhalin')

@shared_task(name='tasks.send_24h_reminder', autoretry_for=(StaleDataError,), max_retries=3)
def send_24h_reminder(appointment_id):
    logger.info(f"[24h] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")
    with current_app.app_context():
        try:
            db.session.expire_all()
            appointment = Appointment.query.options(joinedload(Appointment.client)).get(appointment_id)
            if not appointment:
                logger.error(f"[24h] –ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if appointment.reminder_sent:
                logger.info(f"[24h] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return

            local_tz = get_local_timezone()
            appointment_time = local_tz.localize(datetime.combine(appointment.date, appointment.time))
            current_time = datetime.now(local_tz)

            if current_time >= appointment_time:
                logger.warning(f"[24h] –ó–∞–ø–∏—Å—å {appointment_id} —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞ (–≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ).")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            _send_reminder(appointment_id, 24)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            if appointment.confirmation_status == 'pending':
                reminder_1h_time = appointment_time - timedelta(hours=1)
                utc_1h = reminder_1h_time.astimezone(pytz.utc)
                now_utc = datetime.now(pytz.utc)
                if utc_1h > now_utc:
                    task = send_1h_reminder.apply_async(
                        args=[appointment_id],
                        eta=utc_1h,
                        task_id=f"1h_reminder_{appointment_id}"
                    )
                    appointment.reminder_task_id = task.id
                    db.session.commit()
                    logger.info(f"[24h] 1h –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {task.id}")
                else:
                    logger.warning(f"[24h] –í—Ä–µ–º—è –¥–ª—è 1h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")

        except StaleDataError as e:
            logger.error(f"StaleDataError: {str(e)}. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å—å...")
            db.session.rollback()
            raise
        except Exception as e:
            logger.error(f"[24h] –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            db.session.rollback()

@shared_task(name='tasks.send_1h_reminder')
def send_1h_reminder(appointment_id):
    logger.info(f"[1h] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")
    with current_app.app_context():
        try:
            appointment = Appointment.query.options(joinedload(Appointment.client)).get(appointment_id)
            if not appointment:
                logger.warning(f"[1h] –ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.")
                return

            if appointment.reminder_sent:
                logger.info(f"[1h] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return

            local_tz = get_local_timezone()
            appointment_time = local_tz.localize(datetime.combine(appointment.date, appointment.time))
            current_time = datetime.now(local_tz)

            if current_time >= appointment_time:
                logger.warning(f"[1h] –ó–∞–ø–∏—Å—å {appointment_id} —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞ (–≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ).")
                return

            if appointment.confirmation_status == 'confirmed':
                logger.info(f"[1h] –ó–∞–ø–∏—Å—å {appointment_id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
                return

            if appointment.confirmation_status != 'pending':
                logger.info(f"[1h] –ó–∞–ø–∏—Å—å {appointment_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({appointment.confirmation_status}).")
                return

            _send_reminder(appointment_id, 1)

        except Exception as e:
            logger.error(f"[1h] –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)

def _send_reminder(appointment_id, hours_until):
    try:
        appointment = Appointment.query.options(joinedload(Appointment.client)).get(appointment_id)
        if not appointment:
            logger.error(f"–ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if appointment.reminder_sent:
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return

        local_tz = get_local_timezone()
        appointment_time = local_tz.localize(datetime.combine(appointment.date, appointment.time))
        current_time = datetime.now(local_tz)

        if current_time >= appointment_time:
            logger.warning(f"–í—Ä–µ–º—è –¥–ª—è {hours_until}-—á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}.")
            return

        user_phone = appointment.client.phone if appointment.client else None
        if not user_phone:
            logger.warning(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {appointment_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        message = f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ {hours_until} —á–∞—Å{'–∞' if hours_until > 1 else ''} —É –≤–∞—Å –∑–∞–ø–∏—Å—å!\n"
        message += f"üíà –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
        message += f"üïë –í—Ä–µ–º—è: {appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üë®üíº –ú–∞—Å—Ç–µ—Ä: {appointment.master.name}\n"
        if appointment.confirmation_status != 'confirmed':
            message += "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '1'\n"
            message += "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '2'"

        if appointment.confirmation_status != 'confirmed':
            appointment.client.current_state = 'awaiting_confirmation'
            db.session.commit()
            logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {user_phone} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ awaiting_confirmation –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")

        send_message(user_phone, message)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º check_confirmation –¥–ª—è 1-—á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if hours_until == 1 and appointment.confirmation_status == 'pending':
            cancel_time = current_time + timedelta(minutes=10)
            utc_cancel_time = cancel_time.astimezone(pytz.utc)
            now_utc = datetime.now(pytz.utc)
            if utc_cancel_time > now_utc:
                task = check_confirmation.apply_async(
                    args=[appointment_id],
                    eta=utc_cancel_time,
                    task_id=f"check_confirmation_{appointment_id}"
                )
                appointment.reminder_task_id = task.id
                db.session.commit()
                logger.info(f"[1h] check_confirmation –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id} –Ω–∞ {utc_cancel_time.isoformat()} —Å task_id: {task.id}")
            else:
                logger.warning(f"[1h] –í—Ä–µ–º—è –¥–ª—è check_confirmation —É–∂–µ –ø—Ä–æ—à–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")
        else:
            logger.debug(f"check_confirmation –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: hours_until={hours_until}, status={appointment.confirmation_status}")

        appointment.reminder_sent = True
        db.session.commit()
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {hours_until} —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ {hours_until} —á–∞—Å–∞: {str(e)}", exc_info=True)

@shared_task(name='tasks.check_confirmation')
def check_confirmation(appointment_id):
    with current_app.app_context():
        try:
            appointment = db.session.query(Appointment).options(joinedload(Appointment.client)).get(appointment_id)
            if not appointment:
                logger.warning(f"–ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if appointment.confirmation_status == 'pending':
                client = appointment.client
                client_phone = client.phone if client else None
                
                if appointment.reminder_task_id:
                    result = celery.AsyncResult(appointment.reminder_task_id)
                    if result.state not in ['SUCCESS', 'REVOKED']:
                        result.revoke(terminate=True)
                        logger.info(f"–ó–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {appointment.reminder_task_id} –æ—Ç–æ–∑–≤–∞–Ω–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.")
                
                db.session.delete(appointment)
                db.session.commit()
                
                if client_phone:
                    send_message(
                        client_phone,
                        "‚åõ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                    )
                    client.current_state = 'active'
                    db.session.commit()
                    show_main_menu(client_phone)
                
                logger.info(f"–ó–∞–ø–∏—Å—å {appointment_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            else:
                logger.info(f"–ó–∞–ø–∏—Å—å {appointment_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {appointment.confirmation_status}. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_confirmation: {str(e)}", exc_info=True)
            db.session.rollback()

@shared_task(name='tasks.cleanup_old_appointments')
def cleanup_old_appointments():
    with current_app.app_context():
        try:
            month_ago = datetime.now() - timedelta(days=30)
            old_appointments = Appointment.query.filter(
                Appointment.date < month_ago
            ).all()
            
            for app in old_appointments:
                db.session.delete(app)
            
            db.session.commit()
            logger.info("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {str(e)}")
            db.session.rollback()