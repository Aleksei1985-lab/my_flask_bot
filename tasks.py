# tasks.py
from flask import current_app
from celery_app import celery
from datetime import datetime, timedelta
from celery import shared_task  # –ò—Å–ø–æ–ª—å–∑—É–µ–º shared_task
from models import Appointment
from database import db
from routes import send_message
import pytz
import logging


logger = logging.getLogger(__name__)


def get_local_timezone():
    return pytz.timezone('Asia/Sakhalin')


# –í —Ñ–∞–π–ª–µ tasks.py
@celery.task(name='tasks.send_24h_reminder')
def send_24h_reminder(appointment_id):
    logger.info(f"[24h] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")
    with current_app.app_context():
        try:
            appointment = Appointment.query.get(appointment_id)
            if not appointment:
                logger.error(f"[24h] –ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            _send_reminder(appointment_id, 24)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º 1h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            local_tz = get_local_timezone()
            naive_datetime = datetime.combine(appointment.date, appointment.time)
            appointment_time = local_tz.localize(naive_datetime)
            reminder_1h_time = appointment_time - timedelta(hours=1)
            utc_1h = reminder_1h_time.astimezone(pytz.utc)
            
            task = send_1h_reminder.apply_async(args=[appointment_id], eta=utc_1h)
            appointment.reminder_task_id = task.id
            db.session.commit()
            logger.info(f"[24h] 1h –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {task.id}")
            
        except Exception as e:
            logger.error(f"[24h] –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            db.session.rollback()

@celery.task(name='tasks.send_1h_reminder')
def send_1h_reminder(appointment_id):
    logger.info(f"[1h] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}")
    with current_app.app_context():
        try:
            _send_reminder(appointment_id, 1)
        except Exception as e:
            logger.error(f"[1h] –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)

def _send_reminder(appointment_id, hours_until):
    try:
        appointment = Appointment.query.get(appointment_id)
        if not appointment:
            logger.error(f"–ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if appointment.confirmation_status != 'pending':
            logger.info(f"–ó–∞–ø–∏—Å—å {appointment_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        local_tz = get_local_timezone()
        appointment_time = local_tz.localize(
            datetime.combine(appointment.date, appointment.time)
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if datetime.now(local_tz) >= appointment_time:
            logger.warning(f"–í—Ä–µ–º—è –¥–ª—è {hours_until}-—á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment_id}.")
            return
        
        client_phone = appointment.client.phone
        if not client_phone:
            logger.warning(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {appointment_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        message = f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ß–µ—Ä–µ–∑ {hours_until} —á–∞—Å{'–∞' if hours_until > 1 else ''} —É –≤–∞—Å –∑–∞–ø–∏—Å—å!\n"
        message += f"üíà –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
        message += f"üïë –í—Ä–µ–º—è: {appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üë®üíº –ú–∞—Å—Ç–µ—Ä: {appointment.master.name}\n"
        message += "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '1'\n"
        message += "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '2'"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        appointment.client.current_state = 'awaiting_confirmation'
        db.session.commit()

        send_message(client_phone, message)
        
        if hours_until == 1:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç
            cancel_time = datetime.now(local_tz) + timedelta(minutes=10)
            check_confirmation.apply_async(args=[appointment_id], eta=cancel_time)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ {hours_until} —á–∞—Å–∞: {str(e)}")


# –í —Ñ–∞–π–ª–µ tasks.py
@celery.task(name='tasks.check_confirmation')
def check_confirmation(appointment_id):
    with current_app.app_context():
        try:
            appointment = Appointment.query.get(appointment_id)
            if not appointment:
                logger.warning(f"–ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if appointment.confirmation_status == 'pending':
                appointment.confirmation_status = 'expired'
                db.session.commit()
                send_message(
                    appointment.client.phone,
                    "‚åõ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                if hasattr(appointment, 'reminder_task_id') and appointment.reminder_task_id:
                    result = celery.AsyncResult(appointment.reminder_task_id)
                    if result.state != 'SUCCESS':
                        result.revoke(terminate=True)
                        logger.info(f"–ó–∞–¥–∞—á–∞ {appointment.reminder_task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ {appointment_id} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω: {appointment.confirmation_status}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_confirmation: {str(e)}", exc_info=True)
            db.session.rollback()

@celery.task(name='tasks.cleanup_old_appointments')
def cleanup_old_appointments():
    with current_app.app_context():
        try:
            month_ago = datetime.now() - timedelta(days=30)
            old_appointments = Appointment.query.filter(
                Appointment.date < month_ago
            ).all()
            
            for app in old_appointments:
                db.session.delete(app)
            
            db.session.commit()
            logger.info("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {str(e)}")
            db.session.rollback()


