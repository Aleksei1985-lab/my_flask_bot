from flask import Blueprint, request, jsonify
from sqlalchemy.orm import joinedload
import requests
from database import db
from sqlalchemy import func

from models import Client, Appointment, Service, Schedule, Master
from config import Config

from celery.result import AsyncResult
from datetime import datetime, timedelta, time
import pytz
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

main_routes = Blueprint('main', __name__)

def get_day_in_russian(date):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    days = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    return days[date.strftime('%A')]

@main_routes.route('/webhook/', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤."""
    data = request.get_json()

    if data.get('typeWebhook') == 'incomingMessageReceived':
        chat_id = data['senderData']['chatId']
        
        message_data = data.get('messageData', {})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_data.get('typeMessage') == 'textMessage':
            message = message_data.get('textMessageData', {}).get('textMessage', '')
            if message:
                handle_client_message(chat_id, message)
            else:
                logger.warning(f"–ü—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chatId: {chat_id}")
                send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")
                
        else:
            logger.info(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç chatId: {chat_id} (—Ç–∏–ø: {message_data.get('typeMessage')})")
            send_message(chat_id, "–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üòä")
            return jsonify({'status': 'unsupported_type'}), 400

    return jsonify({'status': 'received'}), 200

def show_main_menu(phone):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    menu = (
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
        "1. üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å\n"
        "2. üóÉÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É\n"
        "3. üéâ –ê–∫—Ü–∏–∏\n"
        "4. üîé –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "5. üïπÔ∏è –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "0. üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    send_message(phone, menu)

def send_info(client):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–ª–æ–Ω–µ"""
    info = (
        "–ù–∞—à —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã:\n"
        "üìç –ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123\n"
        "üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00-18:00\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "üåü 10 –ª–µ—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã!"
    )
    send_message(client.phone, info)
    show_main_menu(client.phone)

def send_promotions(client):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö"""
    promotions = (
        "–¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:\n"
        "üéÅ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ\n"
        "üë´ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É 30%\n"
        "üíá‚ôÄÔ∏è –ö–æ–º–ø–ª–µ–∫—Å —É—Å–ª—É–≥ - —Å–∫–∏–¥–∫–∞ 15%"
    )
    send_message(client.phone, promotions)
    show_main_menu(client.phone)

def send_contacts(client):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    contacts = (
        "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 765-43-21\n"
        "‚úâÔ∏è Email: admin@salon.ru\n"
        "üì± WhatsApp: https://wa.me/79997654321"
    )
    send_message(client.phone, contacts)
    show_main_menu(client.phone)

def process_date_selection(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    if message == '0':
        reset_to_main_menu(client)
    elif message == '8':
        client.next_week_start += 1
        show_dates_menu(client)
    elif message == '9':
        if client.next_week_start > 0:
            client.next_week_start -= 1
        show_dates_menu(client)
    else:
        try:
            day_number = int(message)
            if 1 <= day_number <= 7:
                selected_date = calculate_selected_date(client.next_week_start, day_number)
                client.selected_date = selected_date
                client.current_state = 'choosing_time'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
                db.session.commit()
                show_time_slots(client)
            else:
                send_message(client.phone, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7")
        except ValueError:
            send_message(client.phone, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞")

def calculate_selected_date(week_offset, day_number):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    base_date = datetime.now().date()
    return base_date + timedelta(
        days=(week_offset * 7) + (day_number - 1)
    )

def show_time_slots(client):
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å "–°–∞—Ö–∞–ª–∏–Ω"
    tz_sakhalin = pytz.timezone('Asia/Sakhalin')
    current_time = datetime.now(tz_sakhalin)

    service = Service.query.get(client.selected_service_id)
    if not service:
        send_message(client.phone, "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return reset_to_main_menu(client)

    schedule = Schedule.query.filter_by(
        master_id=client.selected_master_id,
        date=client.selected_date
    ).first()

    if not schedule:
        send_message(client.phone, "‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç—É –¥–∞—Ç—É.")
        return show_dates_menu(client)

    # –ü–µ—Ä–µ–¥–∞–µ–º tz_sakhalin –≤ get_available_time_slots
    available_slots = get_available_time_slots(service, client.selected_date, client.selected_master_id, tz_sakhalin)
    
    client.available_slots = available_slots
    db.session.commit()

    if available_slots:
        menu = ["–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"]
        for idx, slot in enumerate(available_slots, 1):
            menu.append(f"{idx}. {slot}")
        menu.append("0. –ù–∞–∑–∞–¥")
        send_message(client.phone, "\n".join(menu))
    else:
        send_message(client.phone, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        client.current_state = 'choosing_date'
        show_dates_menu(client)


def is_break_time(start, end):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤"""
    break_start = datetime.combine(start.date(), time(13, 0))
    break_end = datetime.combine(start.date(), time(14, 0))
    return (start < break_end) and (end > break_start)

def check_time_conflict(new_start, new_end, appointments_data, selected_date):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
    for app_time, app_duration in appointments_data:
        app_start = datetime.combine(selected_date, app_time)
        app_end = app_start + timedelta(minutes=app_duration)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if (new_start < app_end) and (new_end > app_start):
            return True
    return False


def format_slot(index, start_time, end_time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º start_time –∏ end_time –≤ –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Ç–∞–Ω–∏—è
    start_datetime = datetime.combine(datetime.now().date(), start_time)
    end_datetime = datetime.combine(datetime.now().date(), end_time)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
    duration_minutes = (end_datetime - start_datetime).seconds // 60
    
    return f"{index}. {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')} ({duration_minutes} –º–∏–Ω)"

def schedule_reminders(appointment):
    from tasks import send_24h_reminder, send_1h_reminder
    from celery_app import celery
    from sqlalchemy.orm.exc import StaleDataError
    # –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á
    if appointment.reminder_task_id:
        try:
            celery.control.revoke(appointment.reminder_task_id, terminate=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {appointment.reminder_task_id}: {e}")

    local_tz = pytz.timezone('Asia/Sakhalin')
    naive_datetime = datetime.combine(appointment.date, appointment.time)

    local_datetime = local_tz.localize(naive_datetime)
    reminder_24h = local_datetime - timedelta(hours=24)
    reminder_1h = local_datetime - timedelta(hours=1)

    utc_24h = reminder_24h.astimezone(pytz.utc)
    utc_1h = reminder_1h.astimezone(pytz.utc)

    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment.id}:")
    logger.info(f"  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞: {utc_24h.isoformat()}")
    logger.info(f"  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å: {utc_1h.isoformat()}")

    now_utc = datetime.now(pytz.utc)
    
    if utc_24h > now_utc:
        send_24h_reminder.apply_async(args=[appointment.id], eta=utc_24h)
        logger.info("24h reminder scheduled.")
    else:
        logger.warning("–í—Ä–µ–º—è –¥–ª—è 24h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ.")
    
    if utc_1h > now_utc:
        send_1h_reminder.apply_async(args=[appointment.id], eta=utc_1h)
        logger.info("1h reminder scheduled.")
    else:
        logger.warning("–í—Ä–µ–º—è –¥–ª—è 1h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ.")
    try:
        db.session.commit()
    except StaleDataError:
        db.session.rollback()
        logger.warning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å—å...")
        # –Ø–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ë–î
        fresh_appointment = db.session.query(Appointment).get(appointment.id)
        if fresh_appointment:
            schedule_reminders(fresh_appointment)

def process_time_selection(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    if message == '0':
        client.current_state = 'choosing_date'
        db.session.commit()
        show_dates_menu(client)
        return

    try:
        time_index = int(message)
        if time_index < 1:
            raise ValueError

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å "–°–∞—Ö–∞–ª–∏–Ω"
        tz_sakhalin = pytz.timezone('Asia/Sakhalin')

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        service = Service.query.get(client.selected_service_id)
        available_slots = get_available_time_slots(service, client.selected_date, client.selected_master_id, tz_sakhalin)

        if not available_slots or time_index > len(available_slots):
            send_message(client.phone, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏")
            return show_time_slots(client)

        selected_time_str = available_slots[time_index - 1]
        selected_time = datetime.strptime(selected_time_str, "%H:%M").time()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        create_appointment(client, selected_time)

        #  –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    except (ValueError, IndexError):
        send_message(client.phone, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏")
        show_time_slots(client)

        
def get_available_masters(service, selected_date):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    masters = service.masters  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —É—Å–ª—É–≥–µ
    available_masters = []

    for master in masters:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        master_schedule = Schedule.query.filter_by(date=selected_date, master_id=master.id).all()
        
        # –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if master_schedule:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞
            appointments = Appointment.query.filter(
                Appointment.date == selected_date,
                Appointment.master_id == master.id
            ).all()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –º–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
            if not appointments:
                available_masters.append(master)

    return available_masters

def is_time_slot_fully_booked(booked_times, schedule, service):
    opening_time = datetime.combine(schedule.date, schedule.opening_time)
    closing_time = datetime.combine(schedule.date, schedule.closing_time)
    
    current_time = opening_time
    slot_duration = timedelta(minutes=service.duration)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
    
    while current_time + slot_duration <= closing_time:
        slot_end = current_time + slot_duration
        if not any(start <= current_time < end or start < slot_end <= end for start, end in booked_times):
            return False
        current_time = slot_end  # –®–∞–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

    return True

def valid_chat_id(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id"""
    return chat_id and (chat_id.endswith('@c.us') or chat_id.endswith('@g.us'))

def handle_client_message(chat_id, message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    client = Client.query.filter_by(phone=chat_id).first()
    
    if not client:
        register_new_client(chat_id)
        return  # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –Ω–µ –≤—ã–∑—ã–≤–∞—è –º–µ–Ω—é —Å—Ä–∞–∑—É
    
    process_client_input(client, message.strip())


def process_client_input(client, message):
    """–†–æ—É—Ç–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state_handlers = {
        'expecting_name': handle_name_input,
        'checking_appointments': handle_appointment_check,
        'waiting_for_cancellation': handle_cancellation,
        'active': handle_active_state,
        'choosing_service_category': process_service_category_selection,
        'choosing_sub_service': process_sub_service_selection,
        'choosing_master': process_master_selection,
        'choosing_date': process_date_selection,
        'choosing_time': process_time_selection,
        'choosing_type': process_service_type_selection,
        'awaiting_confirmation': handle_confirmation,
    }
    
    handler = state_handlers.get(client.current_state, handle_unknown_state)
    handler(client, message)

# –í —Ñ–∞–π–ª–µ routes.py
def handle_confirmation(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    from celery_app import celery
    try:
        # –ò—â–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ —Å pending —Å—Ç–∞—Ç—É—Å–æ–º
        pending_appointments = [a for a in client.future_appointments 
                               if a.confirmation_status == 'pending']
        
        if not pending_appointments:
            send_message(client.phone, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return reset_to_main_menu(client)

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å (—Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é)
        appointment = pending_appointments[-1]
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment.id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if message == '1':
            appointment.confirmation_status = 'confirmed'
            # –û—Ç–º–µ–Ω—è–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if appointment.reminder_task_id:
                celery.control.revoke(appointment.reminder_task_id, terminate=True)
                logger.info(f"–ó–∞–¥–∞—á–∞ {appointment.reminder_task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            send_message(client.phone, "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å.")
            db.session.commit()
            reset_to_main_menu(client)
        
        elif message == '2':
            show_cancellation_menu(client)
            db.session.commit()
        
        else:
            send_message(client.phone, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '1' –∏–ª–∏ '2'.")
            return


    except Exception as e:
        logger.error(f"FATAL ERROR: {str(e)}", exc_info=True)
        db.session.rollback()
        send_message(client.phone, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


def create_appointment(client, selected_time):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É.
    """
    if client.selected_date is None:
        send_message(client.phone, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.")
        return
    
    service = Service.query.get(client.selected_service_id)
    selected_master = Master.query.get(client.selected_master_id)
    start_datetime = datetime.combine(client.selected_date, selected_time)
    end_datetime = start_datetime + timedelta(minutes=service.duration)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    client_appointments = Appointment.query.filter_by(client_id=client.id, date=client.selected_date).all()
    for app in client_appointments:
        app_start = datetime.combine(app.date, app.time)
        app_end = app_start + timedelta(minutes=app.service.duration)
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
        if not (end_datetime <= app_start or start_datetime >= app_end):
            conflict_msg = (
                "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å:\n"
                f"{app.service.name} - {selected_master.name} - {app.date.strftime('%d.%m.%Y')} {app.time.strftime('%H:%M')}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:"
            )
            send_message(client.phone, conflict_msg)
            check_appointments(client)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
            return  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    appointments = Appointment.query.filter(
        Appointment.date == client.selected_date,
        Appointment.master_id == client.selected_master_id
    ).all()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
    for app in appointments:
        app_start = datetime.combine(app.date, app.time)
        app_end = app_start + timedelta(minutes=app.service.duration)
        if not (end_datetime <= app_start or start_datetime >= app_end):
            send_message(client.phone, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.")
            return show_time_slots(client)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    new_appointment = Appointment(
        client_id=client.id,
        service_id=client.selected_service_id,
        master_id=client.selected_master_id,
        date=client.selected_date,
        time=selected_time,
        status='scheduled',
        confirmation_status='pending'
    )
    db.session.add(new_appointment)
    db.session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    appointments = Appointment.query.filter(
        Appointment.date == client.selected_date,
        Appointment.master_id == client.selected_master_id
    ).all()

    busy_intervals = []
    for app in appointments:
        start = app.time.hour * 60 + app.time.minute
        end = start + app.service.duration
        busy_intervals.append({'start': start, 'end': end})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    busy_sorted = sorted(busy_intervals, key=lambda x: x['start'])
    merged = []
    for interval in busy_sorted:
        if not merged or interval['start'] > merged[-1]['end']:
            merged.append(interval)
        else:
            merged[-1]['end'] = max(merged[-1]['end'], interval['end'])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    confirm_message = (
        f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"üë®üíº –ú–∞—Å—Ç–µ—Ä: {selected_master.name}\n"
        f"üìÖ –î–∞—Ç–∞: {client.selected_date.strftime('%d.%m.%Y')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {selected_time.strftime('%H:%M')}\n"
        f"üíà –£—Å–ª—É–≥–∞: {service.name}"
    )
    send_message(client.phone, confirm_message)
    schedule_reminders(new_appointment)
    reset_to_main_menu(client)

def round_to_nearest_15_up(dt):
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–µ—Ä—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∫—Ä–∞—Ç–Ω–æ–≥–æ 15 –º–∏–Ω—É—Ç–∞–º."""
    # –û–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    minutes = (dt.minute // 15) * 15
    if dt.minute % 15 != 0:
        minutes += 15
    
    # –ï—Å–ª–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —á–∞—Å–∞
    if minutes == 60:
        dt += timedelta(hours=1)
        minutes = 0
    
    return dt.replace(minute=minutes, second=0, microsecond=0)

def get_available_time_slots(service, selected_date, master_id, tz_sakhalin):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —É—Å–ª—É–≥—É.
    """
    schedule = Schedule.query.filter_by(date=selected_date, master_id=master_id).first()
    if not schedule:
        return []

    # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞
    opening_dt = datetime.combine(selected_date, schedule.opening_time)
    closing_dt = datetime.combine(selected_date, schedule.closing_time)
    service_duration = timedelta(minutes=service.duration)

    opening_dt = tz_sakhalin.localize(opening_dt)
    closing_dt = tz_sakhalin.localize(closing_dt)

    appointments = Appointment.query.filter_by(date=selected_date, master_id=master_id).all()

    busy_intervals = []
    for appointment in appointments:
        app_start = tz_sakhalin.localize(datetime.combine(selected_date, appointment.time))
        app_end = app_start + timedelta(minutes=appointment.service.duration)
        busy_intervals.append((app_start, app_end))
    busy_intervals.sort(key=lambda x: x[0])

    free_intervals = []
    current_time = opening_dt

    for busy_start, busy_end in busy_intervals:
        if current_time < busy_start:
            free_intervals.append((current_time, busy_start))
        current_time = max(current_time, busy_end)

    if current_time < closing_dt:
        free_intervals.append((current_time, closing_dt))

    available_slots = []
    now = datetime.now(tz_sakhalin)

    for free_start, free_end in free_intervals:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏
        if selected_date == now.date() and free_end <= now:
            continue

        # –û–∫—Ä—É–≥–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        slot_start = max(round_to_nearest_15_up(now), free_start) if selected_date == now.date() else free_start

        current_slot = slot_start
        step = timedelta(minutes=15)

        while current_slot + service_duration <= free_end:
            available_slots.append(current_slot.strftime("%H:%M"))
            current_slot += step

    return available_slots


def is_time_conflict(slot_start_time, slot_end_time, app_time, app_duration):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤."""
    app_start_time = app_time
    app_end_time = (datetime.combine(datetime.now().date(), app_time) + timedelta(minutes=app_duration)).time()

    return (slot_start_time < app_end_time and slot_end_time > app_start_time)

def handle_name_input(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    client.name = message.title()
    client.current_state = 'active'
    db.session.commit()
    send_message(client.phone, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {client.name}!")
    show_main_menu(client.phone)

def handle_active_state(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if message.lower() in ["–ø—Ä–∏–≤–µ—Ç", "hi", "hello"]:
        send_message(client.phone, "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        show_main_menu(client.phone)
    elif message.isdigit() and int(message) in range(6):
        handle_menu_option(client, int(message))
    else:
        send_message(client.phone, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")
        show_main_menu(client.phone)

def handle_menu_option(client, option):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é"""
    menu_options = {
        0: lambda: show_main_menu(client.phone),
        1: lambda: send_info(client),
        2: lambda: show_services_menu(client),
        3: lambda: send_promotions(client),
        4: lambda: check_appointments(client),
        5: lambda: send_contacts(client)
    }
    
    if option in menu_options:
        menu_options[option]()
    else:
        send_message(client.phone, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
    
    db.session.commit()

# –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –ª–æ–≥–∏–∫–µ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ ‚Üì

def check_appointments(client):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQLAlchemy
    appointments = db.session.query(Appointment).options(
        joinedload(Appointment.master),
        joinedload(Appointment.service)
    ).filter(
        Appointment.client_id == client.id,
        Appointment.date >= datetime.now().date()
    ).order_by(Appointment.date, Appointment.time  # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    ).all()
    
    if not appointments:
        send_message(client.phone, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return reset_to_main_menu(client)
        
    response = ["üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ü§ó:"]
    response += [f"{i+1}. {a.service.name} - {a.master.name} - {a.date.strftime('%d.%m.%Y')} {a.time.strftime('%H:%M')}" 
                for i, a in enumerate(appointments)]
    response.append("\n0. –ù–∞–∑–∞–¥\n1. –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
    
    send_message(client.phone, "\n".join(response))
    client.current_state = 'checking_appointments'
    db.session.commit()


def handle_appointment_check(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π"""
    if message == '0':
        reset_to_main_menu(client)
    elif message == '1':
        show_cancellation_menu(client)
    else:
        send_message(client.phone, "–í—ã–±–µ—Ä–∏—Ç–µ 0 –∏–ª–∏ 1")

def show_cancellation_menu(client):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
    appointments = client.future_appointments
    if not appointments:
        send_message(client.phone, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return reset_to_main_menu(client)
    
    response = ["üîª –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:"]
    response += [f"{i+1}. {a.service.name} - {a.date.strftime('%d.%m.%Y')} - {a.time.strftime('%H:%M')}" 
                for i, a in enumerate(appointments)]
    response.append("0. –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    send_message(client.phone, "\n".join(response))
    client.current_state = 'waiting_for_cancellation'
    db.session.commit()

def delete_appointment(appointment):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    db.session.delete(appointment)
    db.session.commit()


def notify_client(client, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É."""
    send_message(client.phone, message)


def handle_cancellation(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    appointments = client.future_appointments

    if message == '0':  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        reset_to_main_menu(client)
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω–¥–µ–∫—Å
        index = int(message) - 1
        if 0 <= index < len(appointments):
            appointment = appointments[index]
            delete_appointment(appointment)

            notify_client(client, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞! –í—Ä–µ–º—è —Å—Ç–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
            updated_appointments = Appointment.query.filter(
                Appointment.client_id == client.id,
                Appointment.date >= datetime.now().date()
            ).all()

            # –í–º–µ—Å—Ç–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥
            client.future_appointments[:] = updated_appointments
            db.session.commit()

            if updated_appointments:
                check_appointments(client)
            else:
                notify_client(client, "‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!")
                reset_to_main_menu(client)
        else:
            notify_client(client, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏")
    except (ValueError, IndexError):
        notify_client(client, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏")



def cancel_appointment(client, index):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    try:
        appointment = client.future_appointments[index]
        delete_appointment(appointment)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        client.future_appointments = Appointment.query.filter(
            Appointment.client_id == client.id,
            Appointment.date >= datetime.now().date()
        ).all()
        
        if client.future_appointments:
            notify_client(client, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
            show_cancellation_menu(client.phone)
        else:
            notify_client(client, "‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!")
            reset_to_main_menu(client.phone)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")
        notify_client(client, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")


def reset_to_main_menu(client):
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    client.current_state = 'active'
    client.selected_service_id = None
    client.selected_date = None
    client.next_week_start = 0
    db.session.commit()
    show_main_menu(str(client.phone))

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ ‚Üì

def show_services_menu(client):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥"""
    main_services = Service.query.filter(Service.parent_service_id == None).all()
    
    menu = ["–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:"]
    for idx, service in enumerate(main_services, 1):
        menu.append(f"{idx}. {service.name}")
    menu.append("0. –ù–∞–∑–∞–¥")
    
    send_message(client.phone, "\n".join(menu))
    client.current_state = 'choosing_service_category'
    db.session.commit()

def show_service_types_menu(client):
    """–ü–æ–∫–∞–∑ —Ç–∏–ø–æ–≤ —É—Å–ª—É–≥"""
    service_types = Service.query.filter(Service.parent_service_id.isnot(None)).all()
    
    if not service_types:
        send_message(client.phone, "‚ö†Ô∏è –¢–∏–ø—ã —É—Å–ª—É–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return reset_to_main_menu(client)
        
    menu = ["–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:"]
    for idx, service in enumerate(service_types, 1):
        menu.append(f"{idx}. {service.name}")  # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
    menu.append("0. –ù–∞–∑–∞–¥")
    
    send_message(client.phone, "\n".join(menu))
    client.current_state = 'choosing_type'
    db.session.commit()

def process_service_type_selection(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏"""
    if message == '0':
        reset_to_main_menu(client)
        return
    
    try:
        type_idx = int(message) - 1
        service_types = Service.query.filter(Service.parent_service_id.isnot(None)).all()
        
        if 0 <= type_idx < len(service_types):
            client.selected_service_category = service_types[type_idx].id
            show_specific_services_menu(client)
        else:
            raise ValueError
    except ValueError:
        send_message(client.phone, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏")
        show_service_types_menu(client)


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ª—É–≥
def process_service_category_selection(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥"""
    if message == '0':
        reset_to_main_menu(client)
        return
    
    try:
        service_idx = int(message) - 1
        main_services = Service.query.filter(Service.parent_service_id == None).all()
        
        if 0 <= service_idx < len(main_services):
            client.selected_service_category = main_services[service_idx].id
            client.current_state = 'choosing_sub_service'
            db.session.commit()
            show_sub_services_menu(client)
        else:
            raise ValueError("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å–ª—É–≥–∏.")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏: {e}")
        send_message(client.phone, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏")
        show_services_menu(client)

def show_sub_services_menu(client):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—É—Å–ª—É–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    sub_services = Service.query.filter(Service.parent_service_id == client.selected_service_category).all()
    
    # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    if not sub_services:
        send_message(client.phone, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return reset_to_main_menu(client)

    menu = ["–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"]
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1, –∞ –Ω–µ —Å 0
    for idx, service in enumerate(sub_services, 1):
        duration = f"{service.duration} –º–∏–Ω." if service.duration < 60 else f"{service.duration // 60} —á. {service.duration % 60} –º–∏–Ω."
        menu.append(f"{idx}. {service.name} - {service.price} —Ä—É–±. ({duration})")
    menu.append("0. –ù–∞–∑–∞–¥")
    
    send_message(client.phone, "\n".join(menu))
    client.current_state = 'choosing_sub_service'
    db.session.commit()

def process_sub_service_selection(client, message):
    if message == '0':
        show_services_menu(client)
        return
    
    try:
        service_idx = int(message)
        sub_services = Service.query.filter(
            Service.parent_service_id == client.selected_service_category
        ).all()
        
        if 1 <= service_idx <= len(sub_services):
            service = sub_services[service_idx - 1]
            client.selected_service_id = service.id
            client.current_state = 'choosing_master'
            db.session.commit()
            show_masters_menu(client)
        else:
            send_message(client.phone, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞")
            show_sub_services_menu(client)
    
    except ValueError:
        send_message(client.phone, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥—É—Å–ª—É–≥–∏")
        show_sub_services_menu(client)


def check_master_availability(master, selected_date):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    appointments = Appointment.query.filter(
        Appointment.date == selected_date,
        Appointment.master_id == master.id
    ).all()
    
    return not appointments 

def show_specific_services_menu(client):
    """–ü–æ–∫–∞–∑ —É—Å–ª—É–≥ –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    services = Service.query.filter_by(category=client.selected_service_category).all()
    if not services:
        send_message(client.phone, "‚ö†Ô∏è –£—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return reset_to_main_menu(client)
        
    menu = ["–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"]
    for service in services:
        duration = f"{service.duration//60} —á. {service.duration%60} –º–∏–Ω." if service.duration >= 60 else f"{service.duration} –º–∏–Ω."
        menu.append(f"{service.id}. {service.name} ({service.price} —Ä—É–±., {duration})")
    menu.append("0. –ù–∞–∑–∞–¥")
    
    send_message(client.phone, "\n".join(menu))

def show_masters_menu(client):
    """–ü–æ–∫–∞–∑ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥—É—Å–ª—É–≥–∏."""
    service = Service.query.get(client.selected_service_id)
    if not service:
        send_message(client.phone, "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return reset_to_main_menu(client)
    
    masters = service.masters
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É—Å–ª—É–≥–∏ {service.name}: {[m.name for m in masters]}")
    
    if not masters:
        send_message(client.phone, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.")
        return reset_to_main_menu(client)
    
    menu = ["–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:"]
    for idx, master in enumerate(masters, 1):
        menu.append(f"{idx}. {master.name}")
    menu.append("0. –ù–∞–∑–∞–¥")
    
    send_message(client.phone, "\n".join(menu))
    client.current_state = 'choosing_master'
    db.session.commit()


def process_master_selection(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞."""
    logger.info(f"–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞): '{message}'")
    message_clean = message.strip()
    
    if message_clean == '0':
        client.current_state = 'choosing_sub_service'
        db.session.commit()
        show_sub_services_menu(client)
        return

    try:
        selected_index = int(message_clean)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤ —á–∏—Å–ª–æ: {e}")
        send_message(client.phone, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Å—Ç–µ—Ä–∞")
        return show_masters_menu(client)

    if selected_index < 1:
        send_message(client.phone, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Å—Ç–µ—Ä–∞")
        return show_masters_menu(client)

    service = Service.query.get(client.selected_service_id)
    if not service:
        send_message(client.phone, "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return reset_to_main_menu(client)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Å–ª—É–≥–µ
    db.session.refresh(service)
    available_masters = service.masters
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞: {[m.name for m in available_masters]}")

    if not available_masters:
        send_message(client.phone, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.")
        return reset_to_main_menu(client)

    if 1 <= selected_index <= len(available_masters):
        selected_master = available_masters[selected_index - 1]
        logger.info(f"–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä: {selected_master.name} (ID: {selected_master.id})")
        
        client.selected_master_id = selected_master.id
        client.current_state = 'choosing_date'
        db.session.commit()
        show_dates_menu(client)
    else:
        send_message(client.phone, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        show_masters_menu(client)


def show_dates_menu(client):
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å "–°–∞—Ö–∞–ª–∏–Ω"
    tz_sakhalin = pytz.timezone('Asia/Sakhalin')
    current_time = datetime.now(tz_sakhalin)
    today = current_time.date()

    dates = generate_date_range(client.next_week_start, tz_sakhalin)
    
    menu = ["–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"]
    
    for idx, date_str in enumerate(dates, 1):
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π (—Ñ–æ—Ä–º–∞—Ç: "09.02.2025")
        date_part = date_str.split()[0]

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –±–µ–∑ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            date_obj = datetime.strptime(date_part, "%d.%m.%Y").date()
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ {date_str}: {e}")
            continue

        if date_obj < today:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule = Schedule.query.filter_by(date=date_obj).first()
        status = "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å" if schedule and schedule.is_working_day else "–í—ã—Ö–æ–¥–Ω–æ–π"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        menu.append(f"{idx}. {date_str} - {status}")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    menu += ["8. –°–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã", "9. –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞—Ç—ã", "0. –ù–∞–∑–∞–¥"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_message(client.phone, "\n".join(menu))
    db.session.commit()

def generate_date_range(week_offset, tz_sakhalin):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞—Ç —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    base_date = datetime.now(tz_sakhalin).date()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    start_date = base_date + timedelta(days=week_offset * 7)
    
    dates = []
    for i in range(7):
        current_date = start_date + timedelta(days=i)
        date_str = f"{current_date.strftime('%d.%m.%Y')} ({get_day_in_russian(current_date)})"
        dates.append(date_str)
    
    return dates

def handle_unknown_state(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    send_message(client.phone, "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    reset_to_main_menu(client)

def register_new_client(chat_id):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    existing_client = Client.query.filter_by(phone=chat_id).first()
    if not existing_client:
        new_client = Client(
            phone=chat_id,
            current_state='expecting_name',
            name=''  # –ò–∑–º–µ–Ω–∏–º –Ω–∞ —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        )
        db.session.add(new_client)
        db.session.commit()
        send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    else:
        send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API."""
    if not chat_id or not text:
        logger.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å chat_id –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    try:
        response = requests.post(
            f"{Config.apiUrl}/waInstance{Config.idInstance}/SendMessage/{Config.apiTokenInstance}",
            json={"chatId": chat_id, "message": text}
        )
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTTP –æ—à–∏–±–∫–∏

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")
    
    except requests.HTTPError as http_err:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {http_err.response.status_code} - {http_err.response.text}")
    
    except requests.RequestException as req_err:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {req_err}")
    
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")